1.	Write a MongoDB query to display all the documents in the collection restaurants. 

db.addresses.find().pretty()

2.	Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant. 

db.addresses.aggregate([
{$project: {restaurant_id: 1, name: 1,borough:1, cuisine:1}}
])



3.	Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. 

db.addresses.aggregate([
{$project: {restaurant_id: 1, name: 1,borough:1, cuisine:1, _id:0}}
])


4.	Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant. 

db.addresses.aggregate([
{$project: {restaurant_id: 1, name: 1,borough:1, cuisine:1, $address.zipcode:1}}
])

5.	Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx. 

db.addresses.aggregate([
{$match: {"borough": "Bronx"}},
{$limit: 5}
])

6.	Write a MongoDB query to display all the restaurant which is in the borough Bronx. 

db.addresses.aggregate([
{$match: {"borough": "Bronx"}}

])

7.	Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx. 

db.addresses.aggregate([
{$match: {"borough": "Bronx"}},
{$skip: 5}
{$limit: 5},

])

8.	Write a MongoDB query to find the restaurants who achieved a score more than 90. 


db.addresses.aggregate([
  { $match: {"grades.score": {$gt: 90}}}
])


9.	Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100. 
db.addresses.aggregate([
{$match: {"grades.score":{$gt:80,$lt:100}}}
])

10.	Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168. 
db.addresses.aggregate([
{$match: {"address.coord":{$lt: -95.754168 }}}
])


11.	Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168. 

db.addresses.aggregate([
{$match: 
	{$and:[{"cuisine": {$ne : "American"}},{"grades.score": {$gt: 90}},{"address.coord":{$lt: -65.754168 }} ]
}
}
])


12.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.

db.addresses.aggregate([
{$match: 
	{$and:[{"cuisine": {$ne : "American"}},{"grades.score": {$gt: 90}},{"address.coord":{$lt: -65.754168 }} ]
}
}
])


13.	Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 

{"address": {"building": "1007", "coord": [-73.856077, 40.848447], "street": "Morris Park Ave", "zipcode": "10462"}, "borough": "Bronx", "cuisine": "Bakery", "grades": [{"date": {"$date": 1393804800000}, "grade": "A", "score": 2}, {"date": {"$date": 1378857600000}, "grade": "A", "score": 6}, {"date": {"$date": 1358985600000}, "grade": "A", "score": 10}, {"date": {"$date": 1322006400000}, "grade": "A", "score": 9}, {"date": {"$date": 1299715200000}, "grade": "B", "score": 14}], "name": "Morris Park Bake Shop", "restaurant_id": "30075445"}


db.addresses.aggregate([
{$match: 
	{$and:[{"cuisine": {$ne : "American"}},{"grades.grade": {$et: "A"}},{"borough":{$lt: -65.754168 }} ]
}
}
])


14.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name. 

15.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name. 

16.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.

17.	Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish. 


18.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronx or Brooklyn. 

19.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronx or Brooklyn. 

20.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10. 


21.	Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 
